import { AssDialogueFormat, AssStyleFormatV4 } from '../interface/subtitle'
import { trimLineBreak } from './common'

const DEFAULT_META = `[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Active Line: 1`

const DEFAULT_SCRIPT_STYLE = `
[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding`

const DEFAULT_SCRIPT_DIALOGUE = `
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
`

const defaultCNSStyle: AssStyleFormatV4 = {
  name: 'CHS',
  fontName: 'Default',
  fontSize: 18,
  primaryColor: '&H00FFFFFF',
  secondaryColor: '&H000000FF',
  outlineColor: '&H00000000',
  backColor: '&H00000000',
  bold: 0,
  italic: 0,
  underline: 0,
  strikeout: 0,
  scaleX: 100,
  scaleY: 100,
  spacing: 0,
  angle: 0,
  borderStyle: 1,
  outline: 1,
  shadow: 1,
  alignment: 2,
  marginL: 10,
  marginR: 10,
  marginV: 10,
  encoding: 1,
}

const defaultENGStyle: AssStyleFormatV4 = {
  name: 'ENG',
  fontName: 'Jost',
  fontSize: 15,
  primaryColor: '&H0000FFFF',
  secondaryColor: '&H000000FF',
  outlineColor: '&H00000000',
  backColor: '&H00000000',
  bold: 0,
  italic: 0,
  underline: 0,
  strikeout: 0,
  scaleX: 100,
  scaleY: 100,
  spacing: 0,
  angle: 0,
  borderStyle: 1,
  outline: 1,
  shadow: 1,
  alignment: 2,
  marginL: 10,
  marginR: 10,
  marginV: 10,
  encoding: 1,
}

export const defaultStylePair = [defaultCNSStyle, defaultENGStyle]

export function generateScriptInfo(scriptStyleList: AssStyleFormatV4[]): string {
  let scriptInfo = DEFAULT_META

  scriptInfo += '\n' + DEFAULT_SCRIPT_STYLE + '\n'
  scriptStyleList.forEach(scriptStyle => {
    scriptInfo += `Style: ${scriptStyle.name},${scriptStyle.fontName},${scriptStyle.fontSize},${scriptStyle.primaryColor},${scriptStyle.secondaryColor},${scriptStyle.outlineColor},${scriptStyle.backColor},${scriptStyle.bold},${scriptStyle.italic},${scriptStyle.underline},${scriptStyle.strikeout},${scriptStyle.scaleX},${scriptStyle.scaleY},${scriptStyle.spacing},${scriptStyle.angle},${scriptStyle.borderStyle},${scriptStyle.outline},${scriptStyle.shadow},${scriptStyle.alignment},${scriptStyle.marginL},${scriptStyle.marginR},${scriptStyle.marginV},${scriptStyle.encoding}\n`
  })

  return scriptInfo
}

export function generateDialogues(dialogues: AssDialogueFormat[]): string {
  let dialogueText = '\n' + DEFAULT_SCRIPT_DIALOGUE

  for (const dialogue of dialogues) {
    dialogueText += `Dialogue: ${dialogue.layer},${dialogue.start},${dialogue.end},${dialogue.style},${dialogue.name},${dialogue.marginL},${dialogue.marginR},${dialogue.marginV},${dialogue.effect},${dialogue.text}\n`
  }

  return dialogueText
}

export function generateBilingualSubtitle(original: string, translated: string): string {
  return `${trimLineBreak(translated)} \\N {\\rENG} ${trimLineBreak(original)}`
}
